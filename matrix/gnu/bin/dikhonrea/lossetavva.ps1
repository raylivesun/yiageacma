#!/usr/bin/pwsh

# **3. Preference Variables:**

# The core of this snippet is setting several built-in PowerShell 
# **preference variables**. These variables control the default 
# behavior of PowerShell commands (cmdlets) within the current 
# scope (in this case, for the duration of the script, unless 
# changed later).
$PreferenceVariables = @"
# *   `$ErrorActionPreference`: Controls how PowerShell responds to
#     non-terminating errors. Setting it to `"Continue"` means
#     that the script will continue executing even if a command
#     generates a non-terminating error.
# *   `$VerbosePreference`: Controls whether verbose messages
#     (generated by `Write-Verbose`) are displayed. Setting it to
#     `"Continue"` means verbose messages will be shown.

# *   `$DebugPreference`: Controls whether debug messages
#     (generated by `Write-Debug`) are displayed. Setting it to
#     `"Continue"` means debug messages will be shown.
# *   `$WarningPreference`: Controls how warning messages
#     (generated by `Write-Warning`) are handled. Setting it to
#     `"Continue"` means warnings will be displayed, but the
#     script will continue running.
# *   `$InformationPreference`: Controls how informational
#     messages (generated by `Write-Information`) are handled.
#     Setting it to `"Continue"` means they will be displayed.
# *   `$ProgressPreference`: Controls whether progress bars
#     (generated by `Write-Progress`) are displayed. Setting it to
#     `"Continue"` means they will be shown.
"@

function lossetavva {
    param (
        OptionalParameters[string] $Command,
        OptionalParameters[string] $Arguments,
        OptionalParameters[string] $WorkingDirectory,
        OptionalParameters[string] $EnvironmentVariables,
        OptionalParameters[string] $Input,
        OptionalParameters[string] $Output,
    )
    
    if ($Command -eq $null) {
        Write-Error "Command is required."
        return
    }
    if ($Arguments -eq $null) {
        Write-Error "Arguments are required."
        return
    }
    if ($WorkingDirectory -eq $null) {
        Write-Error "WorkingDirectory is required."
        return
    }
    if ($EnvironmentVariables -eq $null) {
        Write-Error "EnvironmentVariables are required."
        return
    }
    if ($Input -eq $null) {
        Write-Error "Input is required."
        return
    }
    if ($Output -eq $null) {
        Write-Error "Output is required."
        return
    }

}
