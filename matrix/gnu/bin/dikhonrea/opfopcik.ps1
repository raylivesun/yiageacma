#!/usr/bin/pwsh

# *   **`$ErrorActionPreference = "Stop"`**
#     *   This is often considered a best practice for robust scripts.
#     *   It changes the default behavior for how PowerShell handles **terminating errors** (errors serious enough that a command cannot continue).
#     *   Instead of the default (`Continue`, which displays the error and tries to continue the script), setting it to `"Stop"` causes the script to halt execution immediately when a terminating error occurs in *any* subsequent command. This prevents the script from proceeding in an potentially invalid state.

# *   **`$VerbosePreference = "Continue"`**
#     *   Controls the output of **verbose messages** (messages intended to give the user more detail about what a command is doing, typically written using `Write-Verbose`).
#     *   Setting it to `"Continue"` ensures that any `Write-Verbose` messages generated by subsequent commands will be displayed in the console.

# *   **`$DebugPreference = "Continue"`**
#     *   Controls the output of **debug messages** (messages intended for script developers during debugging, typically written using `Write-Debug`).
#     *   Setting it to `"Continue"` ensures that any `Write-Debug` messages will be displayed. This is usually only desired during development or troubleshooting.

# *   **`$WarningPreference = "Continue"`**
#     *   Controls how the script handles **warning messages** (non-critical issues reported using `Write-Warning`).
#     *   Setting it to `"Continue"` (which is the default anyway) ensures that warning messages are displayed, but the script execution continues.

# *   **`$InformationPreference = "Continue"`**
#     *   Controls the handling of the **information stream** (introduced in PowerShell v5, used for structured data or messages via `Write-Information`).
#     *   Setting it to `"Continue"` ensures that information records written to this stream are displayed.

# *   **`$ProgressPreference = "Continue"`**
#     *   Controls whether **progress bars** (displayed by commands using `Write-Progress` to show the status of long-running operations) are shown.
#     *   Setting it to `"Continue"` ensures that progress bars will be displayed if any subsequent command generates them.

$ErrorActionPreference = "Stop"
$VerbosePreference = "Continue"
$DebugPreference = "Continue"
$WarningPreference = "Continue"
$InformationPreference = "Continue"
$ProgressPreference = "Continue"


